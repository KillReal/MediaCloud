using System.Diagnostics;
using MediaCloud.Repositories;
using MediaCloud.Services;
using NLog;

namespace MediaCloud.WebApp;

public class AutotagService : IAutotagService
{
    private readonly PreviewRepository _previewRepository;
    private readonly IPictureService _pictureService;

    public AutotagService(IPictureService pictureService, PreviewRepository previewRepository)
    {
        _previewRepository = previewRepository;
        _pictureService = pictureService;
    }

    public List<string> AutocompleteTagsForImage(Guid previewId)
    {
        var preview = _previewRepository.Get(previewId);

        if (preview == null)
        {
            return new();
        }
        
        try {
            var image = _pictureService.SaveImageToPath(preview.Content, "D:/ref.jpg");

            Run("D:/Development/MediaCloud/JoyTag/joytag.py", "");
            
            return File.ReadLines("D:/suggested_tags.txt")
                .Take(100)
                .Select(x => x.Split(":")[0])
                .Where(x => string.IsNullOrWhiteSpace(x) == false).ToList();
        }
        catch (Exception ex)
        {
            LogManager.GetLogger("AutotagService").Error(ex, "Failed to process autotagging for image");
            throw;
        }
    }

    public List<string> GetSuggestionsByString(string searchString, int limit = 10)
    {
        try {
            return File.ReadLines("D:/Development/MediaCloud/JoyTag/models/top_tags.txt")
                .Where(x => x.ToLower().StartsWith(searchString.ToLower()))
                .Take(limit)
                .ToList();
        }
        catch (Exception ex)
        {
            LogManager.GetLogger("AutotagService").Error(ex, "Failed to read tag aliases");
            return new();
        }
    }

    private void Run(string cmd, string args)
    {
        ProcessStartInfo info = new()
        {
            FileName = "C:/Users/rtimo/AppData/Local/Microsoft/WindowsApps/python3.11.exe",
            Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args),
            UseShellExecute = false,// Do not use OS shell
            CreateNoWindow = false, // We don't need new window
            RedirectStandardOutput = true,// Any output, generated by application will be redirected back
            RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
        };

        Process.Start(info).WaitForExit();
    }
}
