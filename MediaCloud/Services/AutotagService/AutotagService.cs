using System.Diagnostics;
using MediaCloud.Data;
using MediaCloud.Data.Models;
using MediaCloud.Repositories;
using MediaCloud.Services;
using MediaCloud.WebApp.Controllers;
using MediaCloud.WebApp.Services.ActorProvider;
using Microsoft.AspNetCore.Routing.Constraints;
using NLog;
using ILogger = NLog.ILogger;

namespace MediaCloud.WebApp;

public class AutotagService : IAutotagService
{
    private readonly ILogger _logger = LogManager.GetLogger("AutotagService");
    private readonly IPictureService _pictureService;

    private double _averageExecutionTime = 0;

    public double GetAverageExecutionTime() => _averageExecutionTime;

    public AutotagService(IPictureService pictureService)
    {
        _pictureService = pictureService;
    }

    public List<Tag> AutocompleteTagsForImage(Preview preview, TagRepository tagRepository)
    {
        if (preview == null)
        {
            return new();
        }
        
        try {
            var stopwatch = DateTime.Now;

            _logger.Info("Executed AI tag autocompletion for Preview: {previewId}", preview.Id);
            var image = _pictureService.SaveImageToPath(preview.Content, "D:/ref.jpg");

            Run("D:/Development/MediaCloud/JoyTag/joytag.py", "");

            var suggestedTags = File.ReadLines("D:/suggested_tags.txt")
                .Take(100)
                .Select(x => x.Split(":")[0])
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToList();
            var suggestedTagsString = string.Join(" ", suggestedTags);

             var elapsedTime = (DateTime.Now - stopwatch).TotalSeconds;

             if (_averageExecutionTime <= 0.0) {
                _averageExecutionTime = elapsedTime;
             }
             else {
                _averageExecutionTime = (_averageExecutionTime + elapsedTime) / 2;
             }

            _logger.Info("AI tag autocompletion for Preview: {previewId} successfully executed within: {elapsedTime} sec, suggested tags: {suggestedTagsString}", 
                preview.Id, elapsedTime, suggestedTagsString);
            
            var actualTags = tagRepository.GetRangeByAliasString(suggestedTagsString);
            var actualTagsString = string.Join(" ", actualTags.Select(x => x.Name));

            _logger.Info("Existing tags for suggestion: {actualTagsString}", actualTagsString);

            return actualTags;
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "Failed to process autotagging for image");
            throw;
        }
    }

    public List<string> GetSuggestionsByString(string searchString, int limit = 10)
    {
        try {
            return File.ReadLines("D:/Development/MediaCloud/JoyTag/models/top_tags.txt")
                .Where(x => x.ToLower().StartsWith(searchString.ToLower()))
                .Take(limit)
                .ToList();
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "Failed to read tag aliases");
            return new();
        }
    }

    private void Run(string cmd, string args)
    {
        ProcessStartInfo info = new()
        {
            FileName = "C:/Users/rtimo/AppData/Local/Microsoft/WindowsApps/python3.11.exe",
            Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args),
            UseShellExecute = false,// Do not use OS shell
            CreateNoWindow = false, // We don't need new window
            RedirectStandardOutput = true,// Any output, generated by application will be redirected back
            RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
        };

        Process.Start(info).WaitForExit();
    }
}
