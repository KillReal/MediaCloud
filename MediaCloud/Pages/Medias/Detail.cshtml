@page
@using MediaCloud.Data.Types
@model MediaCloud.Pages.Medias.MediaDetailModel

@{
    ViewData["Title"] = "Details";
}

<div class="page-container">
    <h1>Details</h1>

    <div class="button-panel">
        <div>
            <a href="@(Model.ReturnUrl)&ReturnUrl=@Model.RootReturnUrl.Replace('&', '$')" class="btn btn-info mt-4">Back to Gallery</a>
        </div>
    </div>

    <hr />

    <div class="picture-container">
        @if (Model.PrevPreviewId != null)
        {
            <img id="left-arrow" 
                src="/img/arrow-left.svg" 
                class="arrow-button-left" 
                onclick="window.location='/Medias/Detail/?id=@(Model.PrevPreviewId)&returnUrl=@(Model.ReturnUrl)'"
            />
        }
        
        <div class="picture-viewport w-100 shadow-1-strong mb-4">
            <img class="picture-viewer h-100 shadow-1-strong mb-2 me-3 rounded" id="picture"
                src="data:image/png;base64,@Convert.ToBase64String(Model.Media.Content)"
            />
        </div>

        @if (Model.NextPreviewId != null)
        {
            <img id="right-arrow" 
                src="/img/arrow-right.svg" 
                class="arrow-button-right"
                onclick="window.location='/Medias/Detail/?id=@(Model.NextPreviewId)&returnUrl=@(Model.ReturnUrl)'"
            />
        }

        <div class="picture-controls-container text-black">
            Rotation:
            <button class="btn btn-info btn-rounded rotate-button" style="height: 2rem" onclick="rotatePicture(-90);">
                <img class="h-100" src="/img/rotating-arrow-left.png">
            </button>
            <button class="btn btn-info btn-rounded rotate-button" style="height: 2rem" onclick="rotatePicture(90);">
                <img class="h-100" src="/img/rotating-arrow-right.png">
            </button>
        </div>
    </div>

    <div class="row">
        <form enctype="multipart/form-data" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for=@(Model.ReturnUrl) class="form-control">
            <input type="hidden" asp-for=@(Model.PreviewId) class="form-control">
            <input type="hidden" asp-for=@(Model.Media.Preview.Id) class="form-control">
            <input type="hidden" asp-for=@(Model.Media.Id) class="form-control">
            <input type="hidden" asp-for=@(Model.ReturnUrl) class="form-control">
            <input type="hidden" asp-for=@(Model.RotationDegree) class="form-control" id="modelRotationDegree">
            <div class="row">
                <div class="form-group autocomplete-list autocomplete mb-3 col">
                    <label class="col-form-label">
                        Enter tags with spaces between
                    </label>
                    <textarea asp-for="@Model.TagsString" class="form-control" id="filterGrab">        
                    </textarea>
                </div>
            </div>
            <div class="form-group mb-3 d-flex justify-content-between">
                <input type="submit" value="Edit" class="btn btn-success" />
                <a class="btn btn-info btn-rounded text-nowrap" 
                    asp-page="Index" 
                    asp-route-filter=@(Model.TagsString) 
                    asp-route-sort=@("UpdatedAtDesc")>
                    Show similar
                </a>
                <button class="btn btn-danger btn-rounded" 
                    asp-page-handler="Delete" 
                    asp-route-id=@(Model.PreviewId)>
                    Remove
                </button>
            </div>
        </form>
    </div>

    <div class="row">
        <div class="col-sm pt-3">
            <ul class="list-group">
            <li class="list-group-item">Id: @Model.Media.Id</li>  
            <li class="list-group-item">Resolution: @Model.Media.Resolution</li>
            <li class="list-group-item">Size: @Model.Media.SizeInfo</li>
            <li class="list-group-item">Creator: @Model.Media.Creator.Name</li>
            <li class="list-group-item">Updator: @Model.Media.Updator.Name</li>
            <li class="list-group-item">Time of create: @Model.Media.CreatedAt</li>
            <li class="list-group-item">Time of update: @Model.Media.UpdatedAt</li>
        </ul>
        </div>
        <div class="col-sm pt-3">
             <ul class="list-group h-100">
                 <li class="list-group-item h-100">
                    Related tags: 
                    @foreach(var tag in Model.Tags)
                    {
                        var classStyle = "btn-info";
                        switch (tag.Type) 
                        {
                            case TagType.Character:
                                classStyle = "btn-warning";
                                break;
                            case TagType.Series:
                                classStyle = "btn-success";
                                break;
                            case TagType.Clothes:
                                classStyle = "btn-danger";
                                break;
                        }
                        <a class="btn @classStyle btn-rounded me-1 mb-2" 
                            asp-page="/Tags/Detail" 
                            asp-route-id=@tag.Id
                            asp-route-returnUrl='@Model.ReturnUrl'>
                            @tag.Name
                        </a>
                    }
                </li>         
            </ul>
        </div>
    </div>
</div>

<script src="~/js/tagAutocompletion.js"></script>

<script>
    autocomplete(document.getElementById("filterGrab"));

    document.addEventListener('keydown', (event) => {
        if ( event.code == 'ArrowLeft') {
            document.getElementById("left-arrow").click();
        }
        if (event.code == 'ArrowRight') {
            document.getElementById("right-arrow").click();
        }
    }, false);

    var currentDegree = 0;

    function rotatePicture(degree) {

        currentDegree += degree;

        if (currentDegree > 180) {
            currentDegree = -90;
        } else if (currentDegree < -180) {
            currentDegree = 90;    
        }

        var picture = document.getElementById("picture");
        picture.style.transform = "rotate(" + currentDegree + "deg)";

        if (currentDegree == 90 || currentDegree == -90) {
            picture.style.scale = picture.height / picture.width;
        }
        else {
            picture.style.scale = 1;
        }

        var modelRotationDegree = document.getElementById("modelRotationDegree");
        modelRotationDegree.value = currentDegree;
    }
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}