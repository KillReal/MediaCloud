@page
@using MediaCloud.Data.Types
@model MediaCloud.Pages.Medias.DetailModel

@{
    ViewData["Title"] = "Details";
}

<div class = "page rounded-3 p-3 text-white">
    <h1>Details</h1>

    <div class="button-panel d-flex flex-row align-items-center">
        <div>
            <a href="@(Model.ReturnUrl)" class="btn btn-info mt-4">Back to Gallery</a>
        </div>
    </div>

    <hr />

    

    <div class="img-container">
        @if (Model.PrevPreviewId != null)
        {
            <img id="left-arrow" src="/img/arrow-left.svg" style="cursor: pointer; position: absolute; left: 0; width: 2rem; background: deepskyblue; padding: 0.5rem; border-radius: 1rem" onclick="window.location='/Medias/Detail/?id=@(Model.PrevPreviewId)&returnUrl=@(Model.ReturnUrl)'" />

        }
        
        <div class="w-100 shadow-1-strong mb-4" style="max-height: 85vmin;">
            <img class="w-100 h-100 shadow-1-strong mb-2 me-3 rounded" style="object-fit: contain; max-height: 80vmin;"
                 src="data:image/png;base64,@Convert.ToBase64String(Model.Media.Content)" />
        </div>

        @if (Model.NextPreviewId != null)
        {
            <img id="right-arrow" src="/img/arrow-right.svg" style="cursor: pointer; position: absolute; right: 0; width: 2rem; background: deepskyblue; padding: 0.5rem; border-radius: 1rem" onclick="window.location='/Medias/Detail/?id=@(Model.NextPreviewId)&returnUrl=@(Model.ReturnUrl)'" />
        }
    </div>

    

    <div class="row">
        <form enctype="multipart/form-data" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for=@(Model.ReturnUrl) class="form-control">
            <input type="hidden" asp-for=@(Model.PreviewId) class="form-control">
            <input type="hidden" asp-for=@(Model.Media.Preview.Id) class="form-control">
            <input type="hidden" asp-for=@(Model.Media.Id) class="form-control">
            <input type="hidden" asp-for=@(Model.ReturnUrl) class="form-control">
            <div class="row">
                <div class="form-group autocomplete-list autocomplete mb-3 col">
                    <label class="col-form-label">Enter tags with spaces between</label>
                    <textarea asp-for="@Model.TagsString" class="form-control" id="filterGrab"></textarea>
                </div>
            </div>
            <div class="form-group mb-3 d-flex justify-content-between">
                <input type="submit" value="Edit" class="btn btn-success" />
                <a class="btn btn-info btn-rounded text-nowrap" asp-page="Index" asp-route-filter=@(Model.TagsString) asp-route-sort=@("UpdatedAtDesc")>Show similar</a>
                <button class="btn btn-danger btn-rounded" asp-page-handler="Delete" asp-route-id=@(Model.PreviewId)>Remove</button>
            </div>
        </form>
    </div>

    <div class="row">
        <div class="col-sm pt-3">
            <ul class="list-group">
            <li class="list-group-item">Id: @Model.Media.Id</li>  
            <li class="list-group-item">Resolution: @Model.Media.Resolution</li>
            <li class="list-group-item">Size: @Model.Media.SizeInfo</li>
            <li class="list-group-item">Creator: @Model.Media.Creator.Name</li>
            <li class="list-group-item">Updator: @Model.Media.Updator.Name</li>
            <li class="list-group-item">Time of create: @Model.Media.CreatedAt</li>
            <li class="list-group-item">Time of update: @Model.Media.UpdatedAt</li>
        </ul>
        </div>
        <div class="col-sm pt-3">
             <ul class="list-group h-100">
                 <li class="list-group-item h-100">Related tags: 
                     @foreach(var tag in Model.Tags)
                    {
                        if (tag.Type == TagType.Character)
                        {
                            <a class="btn btn-warning btn-rounded me-1 mb-2" asp-page="/Tags/Detail" asp-route-id=@tag.Id>@tag.Name</a>
                        }
                        else if (tag.Type == TagType.Series)
                        {
                            <a class="btn btn-success btn-rounded me-1 mb-2" asp-page="/Tags/Detail" asp-route-id=@tag.Id>@tag.Name</a>
                        }
                        else if (tag.Type == TagType.Clothes)
                        {
                            <a class="btn btn-danger btn-rounded me-1 mb-2" asp-page="/Tags/Detail" asp-route-id=@tag.Id>@tag.Name</a>
                        }
                        else
                        {
                            <a class="btn btn-info btn-rounded me-1 mb-2" asp-page="/Tags/Detail" asp-route-id=@tag.Id>@tag.Name</a>
                        }
                    }
                 </li>         
            </ul>
        </div>
    </div>

</div>

<script>
    document.addEventListener('keydown', (event) => {
        if ( event.code == 'ArrowLeft') {
            document.getElementById("left-arrow").click();
        }
        if (event.code == 'ArrowRight') {
            document.getElementById("right-arrow").click();
        }
    }, false);

    let autocomplete = (inp) => {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        let currentFocus;
        inp.addEventListener("input", function (e) {
            let a, //OUTER html: variable for listed content with html-content
                b, // INNER html: filled with array-Data and html
                i, //Counter
                val = this.value.split(' ').pop();

            closeAllLists();

            if (!val) {
                return false;
            }

            currentFocus = -1;

            a = document.createElement("DIV");

            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items list-group text-left");
            a.setAttribute("style", "max-width: 15rem; padding-left: 0.8rem");

            this.parentNode.appendChild(a);

            var url = "/Gallery/GetSuggestions?searchString=" + document.getElementById("filterGrab").value.split(' ').pop() + '&limit=7';
            fetch(url).then(function (response) {
                return response.json();
            }).then(function (data) {

                /*for each item in the array...*/
                for (i = 0; i < data.length; i++) {
                    if (data[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        b = document.createElement("DIV");
                        b.setAttribute("class", "list-group-item list-group-item-action");
                        b.innerHTML = "<strong>" + data[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += data[i].substr(val.length);
                        b.innerHTML += "<input type='hidden' value='" + data[i] + "'>";
                        b.addEventListener("click", function (e) {
                            var inputs = inp.value.split(' ');
                            inputs[inputs.length - 1] = this.getElementsByTagName("input")[0].value + ' ';
                            inp.value = inputs.join(' ');
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            }).catch(function (err) {
                console.log('Fetch Error :-S', err);
            });

        });

        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                currentFocus++;
                addActive(x);
            } else if (e.keyCode == 38) {
                currentFocus--;
                addActive(x);
            } else if (e.keyCode == 13) {
                e.preventDefault();
                if (currentFocus > -1) {
                    if (x) x[currentFocus].click();
                }
            }
        });

        let addActive = (x) => {
            if (!x) return false;
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = x.length - 1;
            x[currentFocus].classList.add("active");
        }

        let removeActive = (x) => {
            for (let i = 0; i < x.length; i++) {
                x[i].classList.remove("active");
            }
        }

        let closeAllLists = (elmnt) => {
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }

        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    autocomplete(document.getElementById("filterGrab"));
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}