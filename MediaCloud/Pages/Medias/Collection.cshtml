@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using MediaCloud.Data.Types
@model MediaCloud.Pages.Medias.CollectionModel

@{
    ViewData["Title"] = "Collection";
}

<div class = "page-title">
    <h1>Collection</h1>

    <div class="button-panel">
           <div>
                <a href="@(Model.ReturnUrl)" class="btn btn-info mt-4">Back to Gallery</a>
            </div>
        </div> 

    <hr />

    <form enctype="multipart/form-data" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for=@(Model.ReturnUrl) class="form-control">
        <input type="hidden" asp-for=@(Model.IsOrderChanged) class="form-control" id="order-changed">
        <input type="hidden" asp-for=@(Model.Collection.Id) class="form-control">
        <div class="row thumbnail-sortable" id="sortable-gallery" style="display: none"> 
        </div>
        
        <div class="row">
            <div class="col-sm pt-3" style="margin-right: -1rem">
                <ul class="list-group">
                    <li class="list-group-item">Id: @Model.Collection.Id</li>
                    <li class="list-group-item">Medias Size: @Model.CollectionSizeInfo</li>
                    <li class="list-group-item">Medias count: @Model.TotalCount</li>
                    <li class="list-group-item">Tags count: @Model.Tags.Count</li>
                    
                </ul>
            </div>
            <div class="col-sm pt-3" style="margin-left: -1rem">
                <ul class="list-group">
                    <li class="list-group-item">Creator: @Model.Collection.Creator.Name</li>
                    <li class="list-group-item">Updator: @Model.Collection.Updator.Name</li>
                    <li class="list-group-item">Time of create: @Model.Collection.CreatedAt</li>
                    <li class="list-group-item">Time of update: @Model.Collection.UpdatedAt</li>
                </ul>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb-3 col-sm h-100 autocomplete-list autocomplete">
                <label class="col-form-label">Enter tags with spaces between</label>
                <textarea asp-for="@Model.TagsString" class="form-control" style="height: 100%" id="filterGrab">

                </textarea>
            </div>
            <div class="col-sm">
                <label class="col-form-label" style="visibility: hidden">List of existed tags</label>
                <ul class="list-group">
                    <li class="list-group-item h-100">
                        Related tags:
                        @foreach (var tag in Model.Tags)
                        {
                            if (tag.Type == TagType.Character)
                            {
                                <a class="btn btn-warning btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id>@tag.Name
                                </a>
                            }
                            else if (tag.Type == TagType.Series)
                            {
                                <a class="btn btn-success btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id>@tag.Name
                                </a>
                            }
                            else if (tag.Type == TagType.Clothes)
                            {
                                <a class="btn btn-danger btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id>@tag.Name
                                </a>
                            }
                            else
                            {
                                <a class="btn btn-info btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id>@tag.Name
                                </a>
                            }
                        }
                    </li>
                </ul>
            </div>
        </div>

        <div class="form-group control-button-panel">
            <input type="submit" value="Edit" class="btn btn-success" />
            <a class="btn btn-info btn-rounded me-1 ms-2" onclick="startReorder();" id="reorder-button">
                Reorder
            </a>
            <a class="btn btn-info btn-rounded me-1 ms-2 text-nowrap" 
                asp-page="Index" 
                asp-route-filter=@(Model.TagsString) 
                asp-route-sort=@("UpdatedAtDesc")>
                Show similar
            </a>
            <button class="btn btn-danger btn-rounded" 
                asp-page-handler="Delete" 
                asp-route-id=@(Model.Collection.Id)>
                Remove
            </button>
        </div>

        <div class="row gallery" id="gallery">   
                
        </div>

        <div class="d-flex justify-content-center">
            <div class="spinner-border text-light" 
                role="status" 
                id="loadingSpinner" 
                style="display: none; width:3rem; height:3rem">
            </div>
        </div>
    </form>
    
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="~/js/html5sortable.js"></script>
<script src="~/js/tagAutocompletion.js"></script>

<script type="text/javascript">
    autocomplete(document.getElementById("filterGrab"));
    
    sortable('.thumbnail-sortable', {
        placeholderClass: 'col-md-2'
    });

    sortable('.thumbnail-sortable')[0].addEventListener('sortupdate', function (e) {
        var row = document.getElementById('sortable-gallery');
        var place = 0;
        for (const child of row.children) {
            var order = child.getElementsByClassName("order-val visually-hidden");
            order[0].value = place;
            place++;
        }
    });

    function startReorder() {
        document.getElementById('order-changed').value = true;
        document.getElementById('reorder-button').style.display = "none";
        document.getElementById('sortable-gallery').style.display = "flex";
        document.getElementById('gallery').style.display = "none";
    }

    function CreateImg(content) {
        //Create new picture element
        var img = document.createElement('img');
        img.className = "w-100 shadow-1-strong";
        img.style = "border-radius: 0.5rem";
        img.src = "data:image/png;base64," + content;
        
        return img;
    }

    function CreateActualCard(data, id) {
        // Create new actual card
        var cardDiv = document.createElement('div');
        cardDiv.className = "picture-card picture shadow-1-strong col-md-4";
        cardDiv.id = id;
        cardDiv.onclick = function (e) {
            var id = e.currentTarget.id;
            window.location = "Detail?id=" + data[id].id + "&returnUrl=/Medias/Collection?id=" + 
                '@Model.Collection.Id';
        }

        // With image
        var img = CreateImg(data[id].content);

        cardDiv.appendChild(img);

        return cardDiv;
    }

    function CreateSortCard(data, id, orderId) {
        // Create new sort card
        var sortCardDiv = document.createElement('div');
        sortCardDiv.className = "picture-card shadow-1-strong col-md-2";
        sortCardDiv.draggable = true;
        sortCardInnerDiv = document.createElement('div');
        sortCardInnerDiv.className = "card list-clickable p-2 pb-4 d-flex flex-column align-items-center justify-content-between thumbnail";
        sortCardInnerDiv.style = "border-radius: 0.75rem";

        // With image
        var img = CreateImg(data[id].content);

        // Create sort input iterator
        var sortInput = document.createElement('input');
        sortInput.className = "order-val visually-hidden";
        sortInput.type = "number";
        sortInput.id = "Orders_" + orderId;
        sortInput.name = "Orders[" + orderId + "]";
        sortInput.value = data[id].order;

        sortCardInnerDiv.appendChild(img);
        sortCardInnerDiv.appendChild(sortInput);
        sortCardDiv.appendChild(sortCardInnerDiv);

        return sortCardDiv;
    }

    var currentOffset = -@Model.ListRequest.Count;
    var nextOffset = 0;

    window.addEventListener("scroll", function (e) {
        // OnScroll autoloading
        if ((window.innerHeight + window.scrollY + 2000) >= document.body.offsetHeight) {
            // Continue if we at end of page
            if (currentOffset == nextOffset) {
                // Return if we displayed all elements in batches
                return;
            }
            
            if (currentOffset > @Model.TotalCount) {
                // If it last batch, hide loading spinner and return
                nextOffset = currentOffset;
                document.getElementById('loadingSpinner').style = "display: none";
                return;
            }

            // Update current progress
            currentOffset += @Model.ListRequest.Count;

            // Get next batch
            var url = "/Collection/PreviewsBatch?id=" + '@Model.Collection.Id' + "&count=" + @Model.ListRequest.Count + "&offset=" + nextOffset;
            fetch(url).then(function (response) {
                return response.json();
            }).then(function (data) {
                // Get gallerie to show elements batch. One for viewing and one for sorting.
                var gallery = document.getElementById('gallery');
                var sortableGallery = document.getElementById('sortable-gallery');
                for (var i = 0; i < data.length; i++) {
                    // For each element in batch
                    // Creates new cards
                    var sortCard = CreateSortCard(data, i, i + currentOffset);
                    var actualCard = CreateActualCard(data, i);

                    // Add them to galleries
                    gallery.appendChild(actualCard);
                    sortableGallery.appendChild(sortCard);
                }

                // Move to next batch
                sortable('.thumbnail-sortable');
                nextOffset += @Model.ListRequest.Count;
            }).catch(function (err) {
                console.log('Fetch Error :-S', err);
            });
        }
    });

    window.scrollTo(0, 1);
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
