@page
@model StatisticModel
@{
    ViewData["Title"] = "Statistic";
}
@using MediaCloud.Extensions
@using MediaCloud.Services;
@using SixLabors.ImageSharp

<h1 class="pt-3 text-white">Statistic</h1>

<div class="button-panel d-flex flex-row align-items-center mt-3">
    <a onclick="history.back();" class="btn btn-info">
        Back
    </a>
    <div>
        <a id="recalculateButton" class="btn btn-info">Recalculate</a>
    </div>
</div>

<hr style="color: white"/>

<div class="page-container">
    <div>
        <div class="row" style="justify-content: space-around; min-width: 45rem;">
            <div class="col whiteback-bar">
                <canvas class="chart-canvas" id="CountChart"></canvas>
            </div>
            <div class="col whiteback-bar">
                <canvas class="chart-canvas" id="SizeChart"></canvas>
            </div>
        </div>
        <div class="row" style="justify-content: space-around; min-width: 45rem;">
            <div class="col whiteback-bar" style="justify-content: space-around;">
                <canvas class="chart-canvas-block" style="max-height: 50rem" id="TagsChart"></canvas>
            </div>
            <div class="col whiteback-bar">
                <canvas class="chart-canvas" id="ActivityChart"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="loadingModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Media uploading...</h5>
                <div class="spinner-border text-primary" role="status" id="loadingSpinner" style="display: block">
                </div>
            </div>
            <div class="modal-body" id="modalBody">
                <div class="mb-1">
                    <label class="col-form-label" id="orderPos">Your position in order: updating...</label>
                </div>
                <div class="mb-1">
                    <label class="col-form-label" id="mediasCount">Medias count: updating...</label>
                </div>
            </div>
            <div class="modal-footer">
                <a href="/Statistic" class="btn btn-primary">Close</a>
            </div>
        </div>
    </div>
</div>

<script src="~/js/chart.js"></script>
<script src="~/js/chartjs-plugin-datalabels.js"></script>
<script src="~/js/luxon.js"></script>
<script src="~/js/chartjs-adapter-luxon.js"></script>

<script type="text/javascript">
    const dayDisplayFormat = 'DD';
    var selectedTheme = localStorage.getItem('ui-theme-name');
    let fontColor = 'black';
    let cssStyleFile = 'site.css';
    let tagsChartGroupsSelected = new Array(@Model.Tags.Select(x => x.Color).Distinct().Count()).fill(true);
    
    function getTagGroupIndex(color) {
        const colors = ['@(Html.Raw(string.Join("', '", Model.Tags.Select(x => x.Color).Distinct())))']
        return colors.indexOf(color);
    }

    function getStyleProperty(selector, style)
    {
        for (let i = 0; i < document.styleSheets.length; i++)
        {
            const mySheet = document.styleSheets[i];
            const myRules = mySheet.cssRules ? mySheet.cssRules : mySheet.rules;

            for (let j = 0; j < myRules.length; j++)
            {
                if (myRules[j].selectorText && myRules[j].selectorText.toLowerCase() === selector)
                {
                    return myRules[j].style[style];
                }
            }
        }
    };
    
    // Retrieve hex colors list from css file for class names ('btn-black' etc.)
    function getHexColorStylesListByClassNames(colorNames) {
        colors = []
        
        for (let i = 0; i < colorNames.length; i++) {
            colors.push(getStyleProperty('.btn-' + colorNames[i], 'backgroundColor'));
        }
        
        return colors;
    }

    function endsWith(str, suffix) {
        if (str != null) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        }
        return false;
    };
    
    switch (selectedTheme)
    {
        default:
        case "Light":
            break
        case "Dark":
            fontColor = 'white'
            cssStyleFile = 'site-dark.css'
            break
    }

    function formatBytes(bytes, decimals = 2) {
        if (!+bytes) return '0 Bytes'

        const k = 1024
        const dm = decimals < 0 ? 0 : decimals
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']

        const i = Math.floor(Math.log(bytes) / Math.log(k))

        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`
    };

    new Chart(document.getElementById('SizeChart'), {
        type: 'line',
        data: {
            datasets: [{
                label: "Medias size",
                data: [
                    @foreach (var snapshot in Model.Snapshots)
                    {
                        @(Html.Raw("{x:'" + snapshot.TakenAt.Date.ToString("yyyy-MM-dd") + "',y:'" 
                            + snapshot.MediasSize + "'},"))
                    }
                ],
                fill: true,
                cubicInterpolationMode: 'monotone',
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            interaction: {
                mode: 'index',
                intersect: false,
                axis: 'x'
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        color: fontColor
                    }
                },
                title: {
                    display: true,
                    text: 'Medias size total uploaded',
                    color: fontColor
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            let label = context.dataset.label || '';
                            return formatBytes(context.parsed.y, 1);
                        }
                    }
                }
            },
            scales: {
                x: {
                    type: 'time',
                    display: true,
                    time: {
                        unit: 'day',
                        tooltipFormat: 'DD',
                        displayFormats: {
                            'day': dayDisplayFormat,
                        }
                    },
                    title: {
                        display: true,
                        text: 'Date',
                        color: fontColor
                    },
                    ticks: {
                        color: fontColor
                    }
                },
                y: {
                    beginAtZero: true,
                    type: "linear",
                    title: {
                        display: true,
                        text: 'Data size',
                        color: fontColor
                    },
                    ticks: {
                        color: fontColor,
                        callback: function (value, index, ticks) {
                            return formatBytes(value, 1);
                        }
                    }
                }
            }
        }
    });

    new Chart(document.getElementById('CountChart'), {
        type: 'line',
        data: {
            datasets: [{
                label: 'Medias count',
                data: [
                    @foreach (var snapshot in Model.Snapshots)
                    {
                        @(Html.Raw("{x:'" + snapshot.TakenAt.Date.ToString("yyyy-MM-dd") + "',y:'" 
                            + snapshot.MediasCount + "'},"))
                    }
                ],
                fill: true,
                cubicInterpolationMode: 'monotone',
                tension: 0.4,
                order: 3
            },
            {
                label: 'Tags count',
                data: [
                    @foreach (var snapshot in Model.Snapshots)
                    {
                        @(Html.Raw("{x:'" + snapshot.TakenAt.Date.ToString("yyyy-MM-dd") + "',y:'" 
                            + snapshot.TagsCount + "'},"))
                    }
                ],
                fill: true,
                cubicInterpolationMode: 'monotone',
                tension: 0.4,
                order: 2,
            },
            {
                label: 'Actors count',
                data: [
                    @foreach (var snapshot in Model.Snapshots)
                    {
                        @(Html.Raw("{x:'" + snapshot.TakenAt.Date.ToString("yyyy-MM-dd") + "',y:'" 
                            + snapshot.ActorsCount + "'},"))
                    }
                ],
                fill: true,
                cubicInterpolationMode: 'monotone',
                tension: 0.4,
                order: 1
            }]
        },
        options: {
            responsive: true,
            interaction: {
                mode: 'index',
                intersect: false,
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        color: fontColor
                    }
                },
                title: {
                    display: true,
                    text: 'Entities count',
                    color: fontColor
                },
            },
            scales: {
                x: {
                    type: 'time',
                    display: true,
                    time: {
                        unit: 'day',
                        tooltipFormat: 'DD',
                        displayFormats: {
                            'day': dayDisplayFormat,
                        }
                    },
                    title: {
                        display: true,
                        text: 'Date',
                        color: fontColor
                    },
                    ticks: {
                        color: fontColor
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Count',
                        color: fontColor
                    },
                    ticks: {
                        color: fontColor
                    }
                }
            }
        },
    });

    new Chart(document.getElementById('TagsChart'), {
        type: 'pie',
        data: {
            labels: ['@(Html.Raw(string.Join("', '", Model.Tags.Select(x => x.Name))))'],
            datasets: [
                {
                    label: 'Files count',
                    data: [@(Html.Raw(string.Join(", ", Model.Tags.Select(x => x.PreviewsCount))))],
                    borderWidth: 1,
                    backgroundColor: getHexColorStylesListByClassNames(['@(Html.Raw(string.Join("', '", Model.Tags.Select(x => x.Color.GetDisplayName().ToLower()))))'])
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    labels: {
                        generateLabels(chart) {
                            const data = chart.data;
                            if (data.labels.length && data.datasets.length) {
                                const {
                                    labels: {
                                        pointStyle
                                    }
                                } = chart.legend.options;

                                // Show every other label
                                let indexCounter = 0;
                                const labels = [];
                                const dataColors = ['@(Html.Raw(string.Join("', '", Model.Tags.Select(x => x.Color))))'];
                                for (let i = 0; i < dataColors.length; i += 1) {
                                    const meta = chart.getDatasetMeta(0);
                                    const style = meta.controller.getStyle(i);
                                    
                                    if (!labels.some(x => x.text === dataColors[i])) {
                                        labels.push({
                                            text: dataColors[i],
                                            fillStyle: style.backgroundColor,
                                            strokeStyle: style.borderColor,
                                            lineWidth: style.borderWidth,
                                            pointStyle: pointStyle,
                                            hidden: !chart.getDataVisibility(i),
                                            index: indexCounter
                                        })
                                        indexCounter++;
                                    }
                                }
                                return labels;
                            }
                        },
                    },
                    onClick(e, legendItem, legend) {
                        const dataColors = ['@(Html.Raw(string.Join("', '", Model.Tags.Select(x => x.Color))))'];
                        const dataValues = [@(Html.Raw(string.Join(", ", Model.Tags.Select(x => x.PreviewsCount))))];
                        tagsChartGroupsSelected[legendItem.index] = !tagsChartGroupsSelected[legendItem.index];

                        let valuesSum = 0;                        
                        for (let i = 0; i < dataColors.length; i++) {
                            if (legend.chart.getDataVisibility(i) !== tagsChartGroupsSelected[getTagGroupIndex(dataColors[i])]) {
                                legend.chart.toggleDataVisibility(i);
                            }
                            if (legend.chart.getDataVisibility(i)) {
                                valuesSum += dataValues[i]
                            }
                        }
                        
                        // Hide pies that smaller than 7.5% of full pie.
                        for (let i = 0; i < dataColors.length; i++) {
                            if (legend.chart.getDataVisibility(i) && dataValues[i] < valuesSum / 54) {
                                legend.chart.toggleDataVisibility(i);
                            }
                        }

                        legend.chart.update();
                    }
                },
                title: {
                    display: true,
                    text: 'Tag popularity (top ' + @Model.Tags.Count() + ' of ' + @Model.TotalTagsCount + ' total)',
                    color: fontColor
                },
                datalabels: {
                    clip: true,
                    align: 'start',
                    anchor: 'end',
                    clamp: true,
                    formatter: function (value, context) {
                        return context.chart.data.labels[
                            context.dataIndex
                        ];
                    },
                    backgroundColor: function(context) {
                        return context.dataset.backgroundColor;
                    },
                    color: 'white',
                    font: {
                        weight: 'bold'
                    },
                    borderRadius: 12,
                    padding: 12
                },
            }
        },
        plugins: [ChartDataLabels]
    });

    new Chart(document.getElementById('ActivityChart'), {
        type: 'bar',
        data: {
            datasets: [{
                label: 'Activity factor',
                data: [
                    @foreach (var snapshot in Model.Snapshots.Where(x => 
                        x.TakenAt >= DateTime.Now.Date.AddDays(-Model.ActivityBacktrackDayCount)).ToList())
                    {
                        @(Html.Raw("{x:'" + snapshot.TakenAt.Date.ToString("yyyy-MM-dd") + "',y:'" + 
                            snapshot.ActivityFactor + "'},"))
                    }
                ],
                fill: true
            }]
        },
        options: {
            responsive: true,
            interaction: {
                mode: 'index',
                intersect: false,
            },
            plugins: {
                legend: {
                    labels: {
                        color: fontColor
                    }
                },
                title: {
                    display: true,
                    text: 'Activity of users (last ' + @Model.ActivityBacktrackDayCount + ' days)',
                    color: fontColor
                }
            },
            scales: {
                x: {
                    type: 'time',
                    display: true,
                    time: {
                        unit: 'day',
                        tooltipFormat: 'DD',
                        displayFormats: {
                            'day': dayDisplayFormat,
                        }
                    },
                    title: {
                        display: true,
                        text: 'Date',
                        color: fontColor
                    },
                    ticks: {
                        color: fontColor
                    }
                },
                y: {
                    beginAtZero: true,
                    stepSize: 1,
                    ticks: {
                        color: fontColor
                    }
                }
            }
        },
    });

    const orderPosElem = document.getElementById('orderPos');
    const mediaCountElem = document.getElementById('mediasCount');
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById("modalBody");
    const loadSpinner = document.getElementById("loadingSpinner");

    function updateModalLoadBody(data) {
        if (data == undefined) {
            orderPosElem.innerHTML = 'Your position in order: updating...';
            mediaCountElem.innerHTML = 'Snapshots count: updating...';
        }
        else {
            orderPosElem.innerHTML = 'Your position in order: ' + data.queuePosition;
            mediaCountElem.innerHTML = 'Snapshots count: ' + data.workCount;
        }
    }

    function setModalTitle(title) {
        modalTitle.innerHTML = title;
    }

    function hideModalBody() {
        modalBody.style.display = "none";
    }

    function showModalBody() {
        modalBody.style.display = "block";
    }

    function showLoadSpinner() {
        loadSpinner.style.display = "block";
    }

    function hideLoadSpinner() {
        loadSpinner.style.display = "none";
    }

    function formSubmit(event) {
        setModalTitle('Sending to server...');
        showModalBody();
        updateModalLoadBody();

        const url = "/Statistic/Recalculate";
        const request = new XMLHttpRequest();
        request.open('POST', url, true);
        request.onload = function () { // request successful
            setModalTitle('Waiting queue for processing...');
            showModalBody();
            updateModalLoadBody();
            $('#loadingModal').modal('show');
            const data = JSON.parse(request.response);

            const url = "/Uploader/GetTaskStatus?id=" + data.id;

            console.log('Goes to update status');

            const updator = function () {
                fetch(url)
                    .then((response) => response.json())
                    .then(function (data) {
                        updateModalLoadBody(data);
                        if (data.queuePosition > 1) {
                            setModalTitle('Waiting queue for processing...');
                        }
                        else if (data.queuePosition == 1) {
                            setModalTitle('Server processing...');
                        }
                        else if (data.workCount == 0 && data.isExist == false) {
                            setModalTitle('Recalculation successfully completed!');
                            hideModalBody();
                            hideLoadSpinner();

                            clearInterval(loadingUpdateInterval);
                        }
                    })
            }

            updator();
            var loadingUpdateInterval = setInterval(updator, 1500);
        };

        request.onerror = function () {
            // request failed
        };

        request.send(); // create FormData from form that triggered event
        event.preventDefault();
    }

    // and you can attach form submit event like this for example
    function attachEvent(elementId) {
        document.getElementById(elementId).addEventListener("click", formSubmit);
    }

    attachEvent('recalculateButton');
</script>
