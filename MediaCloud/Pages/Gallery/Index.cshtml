@page
@using MediaCloud.WebApp
@model MediaCloud.Pages.Gallery.ListModel

@{
    ViewData["Title"] = "Gallery";

    var nameSortType = "BlobNameDesc";
    var nameSortSymbol = "";
    var nameButtonStyle = "btn-info";

    var createdAtSortType = "CreatedAtDesc";
    var createdAtSortSymbol = "";
    var createdAtButtonStyle = "btn-info";

    if (Model.ListBuilder.Sorting.PropertyName == "BlobNameDesc"){
        nameSortType = "BlobName";
        nameSortSymbol = "↓";
        nameButtonStyle = "btn-warning";
    }
    else if (Model.ListBuilder.Sorting.PropertyName == "BlobName"){
        nameSortType = "BlobNameDesc";
        nameSortSymbol = "↑";
        nameButtonStyle = "btn-warning";
    }

    if (Model.ListBuilder.Sorting.PropertyName == "CreatedAtDesc"){
        createdAtSortType = "CreatedAt";
        createdAtSortSymbol = "↓";
        createdAtButtonStyle = "btn-warning";
    }
    else if (Model.ListBuilder.Sorting.PropertyName == "CreatedAt"){
        createdAtSortType = "CreatedAtDesc";
        createdAtSortSymbol = "↑";
        createdAtButtonStyle = "btn-warning";
    }

    var randomButtonStyle = Model.ListBuilder.Sorting.PropertyName.Contains("Random") 
        ? "btn-warning"
        : "btn-info";
    var autoloadingButtonStyle = Model.IsAutoloadEnabled 
        ? "btn-info"
        : "btn-secondary";
    var autoloadingButtonSymbol = Model.IsAutoloadEnabled
        ? "✔️"
        : "❌";
}

<div class="page-container">
    <div class="page-header-container">
        <h1>Gallery</h1>
        <div class="progress position-relative">
            <small class="progress-bar-value d-flex position-absolute">Used space: </small>
            <div class="progress-bar bg-success" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: @Model.SpaceUsagePercent%"></div>
            <small class="progress-bar-value" style="right: 0">
                @Model.SpaceUsage
            </small>
        </div>
    </div>

    <div class="button-panel">
        <div class="align-self-center d-flex flex-wrap">   
            <div class="button-group">
                <a class="btn btn-success btn-rounded" 
                    asp-page="Upload">
                        ⮭ Upload
                </a>
            </div>

           <div class="button-group">
                <div class="separator"></div>
                <div class="descriptor">
                    Sort:
                </div>
                <a class="btn @nameButtonStyle btn-rounded text-nowrap" 
                    asp-page="Index" 
                    asp-route-filter=@(Model.ListBuilder.Filtering.Filter) 
                    asp-route-sort=@(nameSortType) 
                    asp-route-isUseAutoload=@(Model.IsAutoloadEnabled)>
                    🅰️ @(nameSortSymbol)
                </a>   
           </div>

           <div class="button-group">
                <a class="btn @createdAtButtonStyle btn-rounded text-nowrap" 
                    asp-page="Index" 
                    asp-route-filter=@(Model.ListBuilder.Filtering.Filter) 
                    asp-route-sort=@(createdAtSortType) 
                    asp-route-isUseAutoload=@(Model.IsAutoloadEnabled)>
                    📅 @(createdAtSortSymbol)
                </a>   
           </div>

            <div class="button-group">
                <a class="btn @randomButtonStyle btn-rounded text-nowrap" 
                    asp-page="Index" 
                    asp-route-filter=@(Model.ListBuilder.Filtering.Filter) 
                    asp-route-sort=@($"Random") 
                    asp-route-isUseAutoload=@(Model.IsAutoloadEnabled)>
                    🎲
                </a>
                <div class="separator"></div>
            </div>

            <div class="button-group">
                <a class="btn @autoloadingButtonStyle btn-rounded text-nowrap" 
                    asp-page="Index" 
                    asp-route-filter=@(Model.ListBuilder.Filtering.Filter) 
                    asp-route-sort=@(Model.ListBuilder.Sorting.PropertyName) 
                    asp-route-isUseAutoload=@(!Model.IsAutoloadEnabled)>
                    Autoload @autoloadingButtonSymbol
                </a>

                <div class="separator"></div>
            </div>
        </div>
        <div class="align-self-center d-flex flex-grow-1">
            <div class="button-group w-100">
                <div class="descriptor">
                    Search:
                </div>
                <div class="button-group-input autocomplete-list autocomplete flex-grow-1">
                    <input asp-for=@Model.ListBuilder.Filtering.Filter 
                        class="form-control" 
                        id="filterGrab" 
                        placeholder="example: @Model.ExampleFilter"
                        autocomplete="off"/>
                </div>
                <a class="btn btn-info btn-rounded me-0" onclick="filterClicked()">
                    ✓ Apply
                </a>
            </div>
        </div>
    </div>  

    <hr style="margin-bottom: 1rem"/>
    @if (Model.ListBuilder.Sorting.PropertyName.Contains("Random") == false)
    {
        <partial name="~/Pages/Shared/_Pagination.cshtml" />
    }
    <div class="row row-cols-xl-@(Model.MaxColumnCount) row-cols-lg-@(Model.MaxColumnCount < 4 ? Model.MaxColumnCount : 4) row-cols-md-@(Model.MaxColumnCount < 3 ? Model.MaxColumnCount : 3) row-cols-sm-@(Model.MaxColumnCount < 2 ? Model.MaxColumnCount : 2) row-col image-row gallery mb-3" id="gallery">
        <partial name="~/Pages/Gallery/_Gallery.cshtml" model=@(new _GalleryPageModel(Model.Previews, Model.AllowedNsfwContent))/>
        
        @if (Model.Previews.Count == 0)
        {
            <h1 style="text-align: center">
                There is nothing here 😥
            </h1>
        }
        
    </div>
    <div class="d-flex justify-content-center mb-3">
        @if (Model.Previews.Count >= Model.ListBuilder.Pagination.Count && Model.IsAutoloadEnabled)
        {
            <div class="oad-spinner spinner-border" 
                role="status" 
                id="loadingSpinner">
            </div>
        }
        <h1 class="page-autoload-notifier" id="loadingDone">
            Your are reached the end 😮
        </h1>
    </div>
    @if (Model.IsAutoloadEnabled == false && Model.ListBuilder.Sorting.PropertyName.Contains("Random") == false)
    {
        <partial name="~/Pages/Shared/_Pagination.cshtml" />
    }
</div>

<script src="~/js/tagAutocompletion.js"></script>

<script type="text/javascript">
    
    autocomplete(document.getElementById("filterGrab"));
    
    var isAutoLoadingEnabled = @Model.IsAutoloadEnabled.ToString().ToLower();
    var filterInput = document.getElementById("filterGrab");
    var filterInputChanged = false;
    
    filterInput.onkeyup = function (e) {
        if (e.keyCode === 13) {
            if (filterInput.value !== "" || filterInputChanged) {
                filterClicked();
            }
        }
        else {
            filterInputChanged = true;
        }
    }

    document.onkeyup = function (e) {
        if (e.keyCode === 13) {
            filterInput.focus();
        }
    }
    
    var currentOffset = @Model.ListBuilder.Pagination.Offset;
    var nextOffset = @Model.ListBuilder.Pagination.Offset + @Model.ListBuilder.Pagination.Count;
    var isEnrichInProcess = false;

    if (isAutoLoadingEnabled) {
        window.addEventListener("scroll", function(e) {
            if ((window.innerHeight + window.scrollY + 1000) >= document.body.offsetHeight) {
                enrichGallery();
            }
        });
    }

    function enrichGallery() {
        if (isEnrichInProcess || currentOffset === nextOffset || currentOffset > @Model.ListBuilder.Pagination.TotalCount) {
                if (currentOffset > @Model.ListBuilder.Pagination.TotalCount) {
                    document.getElementById('loadingSpinner').style = "display: none";
                    document.getElementById('loadingDone').style = "text-align: center; display: block";
                }
                return;
        }
        
        currentOffset += @Model.ListBuilder.Pagination.Count;
        isEnrichInProcess = true;

        var url = "/Gallery/GetPreviewsBatch?count=" + @Model.ListBuilder.Pagination.Count + "&offset=" + nextOffset 
            + "&sort=@(Model.ListBuilder.Sorting.PropertyName)&filter=@(Model.ListBuilder.Filtering.Filter)";
        fetch(url).then(function(response) {
            return response.text();
        }).then(function(data) {
            var gallery = document.getElementById('gallery');

            gallery.insertAdjacentHTML('beforeend', data);
            nextOffset += @Model.ListBuilder.Pagination.Count;
            isEnrichInProcess = false;
        }).catch(function(err) {
            console.log('Fetch Error :-S', err);
        });
    }
    function filterClicked()
    {
        var filter = document.getElementById("filterGrab").value.replace(/\\/g, '');
        window.location.href = "/Gallery?filter=" + filter + "&sort=@(Model.ListBuilder.Sorting.PropertyName)&isUseAutoload=@(Model.IsAutoloadEnabled)";
    };

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
