@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using MediaCloud.Data.Types
@using MediaCloud.WebApp
@model MediaCloud.Pages.Gallery.CollectionModel

@{
    ViewData["Title"] = "Collection";
}

<div class="page-container">
    <h1>Collection</h1>

    <div class="button-panel">
        <div class="button-group justify-content-between w-100">
            <a onclick="history.back();" class="btn btn-info">
                Back
            </a>
            <a class="btn btn-success btn-rounded" 
                href="@Url.Action("DownloadCollection", "Gallery", new { id = Model.Collection.Id })">
                Download
            </a>
        </div>
	</div>

    <hr />

    <form enctype="multipart/form-data" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for=@(Model.IsOrderChanged) class="form-control" id="order-changed">
        <input type="hidden" asp-for=@(Model.Collection.Id) class="form-control">        
        <div class="row">
            <div class="col-sm">
                <ul class="list-group">
                    <li class="list-group-item">Id: @Model.Collection.Id</li>
                    <li class="list-group-item">Files size: @Model.CollectionSizeInfo</li>
                    <li class="list-group-item">Files count: @Model.TotalCount</li>
                    <li class="list-group-item">Tags count: @Model.Tags.Count</li>
                    
                </ul>
            </div>
            <div class="col-sm">
                <ul class="list-group">
                    <li class="list-group-item">Creator: @Model.Collection.Creator.Name</li>
                    <li class="list-group-item">Updator: @Model.Collection.Updator.Name</li>
                    <li class="list-group-item">Time of create: @Model.Collection.CreatedAt</li>
                    <li class="list-group-item">Time of update: @Model.Collection.UpdatedAt</li>
                </ul>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-sm h-100 autocomplete-list autocomplete">
                <label class="col-form-label">Enter tags with spaces between</label>
            </div>
            <div class="col-sm">
            </div>
        </div>

        <div class="row">
            <partial name="~/Pages/Gallery/_Tags.cshtml" model=@(new _TagsModel(Model.Tags))/>
        </div>

        <div class="form-group button-panel">
            <div class="button-group">
                <input type="submit" value="Edit" class="btn btn-success" />

                @if (Model.IsAutotaggingEnabled) 
                {
                    <input class="btn btn-success btn-rounded" 
                        type="button" 
                        value="Autotag ✨" 
                        id="autotagButton" 
                        onclick="autocompleteTags('@Model.Collection.Id')" 
                    />
                }
            </div>

            <div class="button-group">
                <a class="btn btn-info btn-rounded text-nowrap" 
                    asp-page="Index" 
                    asp-route-filter=@(string.Join(' ', Model.Tags.Select(x => x.Name)))) 
                    asp-route-sort=@("UpdatedAtDesc")>
                    Show similar
                </a>
                <button class="btn btn-danger btn-rounded" 
                    asp-page-handler="Delete" 
                    asp-route-id=@(Model.Collection.Id)>
                    Remove
                </button>
            </div>
        </div>

        <div class="row row-cols-sm-@(Model.MaxColumnCount) gallery thumbnail-sortable" id="gallery">
            <partial name="~/Pages/Gallery/_Collection.cshtml" model=@(new _CollectionPageModel(Model.Previews))/>          
        </div>

        <div class="d-flex justify-content-center">
            <div class="spinner-border text-light" 
                role="status" 
                id="loadingSpinner" 
                style="display: none; width:3rem; height:3rem">
            </div>
        </div>
    </form>

      <div class="modal text-black" id="loadingModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">
                        Tag autocompletion in progress...
                    </h5>
                    <div class="spinner-border text-primary" role="status" id="loadingSpinner" style="display: block">
                    </div>
                </div>
                <div class="modal-body" id="modalBody">
                    <div class="mb-1">
                        <label class="col-form-label" id ="executionTime">
                            It's may take some time...
                        </label>
                    </div>
                    <div class="mb-1">
                        <label class="col-form-label" id="progress">
                            Progress: 0%
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-primary" onclick="hideModalBody()">
                        Close
                    </a>
                </div>
            </div>
        </div>
    </div>
    
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="~/js/html5sortable.js"></script>

<script type="text/javascript">
    
    sortable('.thumbnail-sortable', {
        placeholderClass: 'col-md-2'
    });

    sortable('.thumbnail-sortable')[0].addEventListener('sortupdate', function (e) {
        var row = document.getElementById('gallery');
        var place = 0;
        for (const child of row.children) {
            var order = child.getElementsByClassName("order-val");
            order[0].value = place;
            place++;
        }
    });

    function OnCardClick(entityType, dataId)
    {
        window.location = GetPostUrl(entityType, dataId);
    }

    function OnCardInNewWindowClick(entityType, dataId) 
    {
        window.open(GetPostUrl(entityType, dataId));
    }

    function GetPostUrl(entityType, dataId)
    {
        return entityType +"?id=" + dataId;
    }

    var currentOffset = 0;
    var nextOffset = @Model.ListRequest.Count;
    var isEnrichInProcess = false;

    window.addEventListener("scroll", function(e) {
        if ((window.innerHeight + window.scrollY + 2000) >= document.body.offsetHeight) {
            enrichGallery();
        }
    });

    function enrichGallery() {
        if (currentOffset === nextOffset || isEnrichInProcess) {
            // Return if we displayed all elements in batches or loading in progress
            return;
        }
        
        if (currentOffset > @Model.TotalCount) {
            // If it last batch, hide loading spinner and return
            nextOffset = currentOffset;
            document.getElementById('loadingSpinner').style = "display: none";
            return;
        }

        isEnrichInProcess = true;
        currentOffset += @Model.ListRequest.Count;

       var url = "/Gallery/GetCollectionPreviewsBatch?id=" + '@Model.Collection.Id' + "&count=" + @Model.ListRequest.Count + "&offset=" + nextOffset;
        fetch(url).then(function(response) {
            return response.text();
        }).then(function(data) {
            var gallery = document.getElementById('gallery');

            gallery.insertAdjacentHTML('beforeend', data);
            isEnrichInProcess = false;
        }).catch(function(err) {
            console.log('Fetch Error :-S', err);
        });
        
        nextOffset += @Model.ListRequest.Count;
    }

    if (@Json.Serialize(Model.IsAutotaggingEnabled))
    {
        fetch('/Autotagging/IsCollectionProcessing?collectionId=' + '@Model.Collection.Id')
            .then((response) => response.json())
            .then(function (data) {
                if (data == true) {
                        document.getElementById('autotagButton').disabled = true;
                        document.getElementById('autotagButton').value = "Autotagging... ";
                }
            }
    )

    var averageExecutionTime = 45.0 * @Model.TotalCount;

    fetch('/Autotagging/GetCollectionTagsProcessingTime?previewsCount=' + @Model.TotalCount)
        .then((response) => response.json())
        .then(function (data) {
            if (data > 0) {
                averageExecutionTime = data;
            }
        }
    )
    }

    var modalTitle = document.getElementById('modalTitle');
    var modalBody = document.getElementById("modalBody");
    var loadSpinner = document.getElementById("loadingSpinner");

    function setModalTitle(title) {
        modalTitle.innerHTML = title;
    }

    function setModalProgress(taskCount, progress, executionTime) {
        document.getElementById('progress').innerHTML = "Progress: " + parseInt(progress, 10)+ "% and " +
            + taskCount + " more tasks left...";
        document.getElementById('executionTime').innerHTML = 'It may take some time (~' + parseInt(executionTime, 10) + ' sec)';
        document.getElementById('autotagButton').value = "Autotagging... " + parseInt(progress, 10)+ "%";
    }

    function hideModalBody() {
        $('#loadingModal').modal('hide');
    }

    function showModalBody() {
        $('#loadingModal').modal('show');
        document.getElementById('autotagButton').disabled = true;
        document.getElementById('autotagButton').value = "Autotagging... ";
    }

    function showLoadSpinner() {
        loadSpinner.style.display = "block";
    }

    function hideLoadSpinner() {
        loadSpinner.style.display = "none";
    }

    var timerCounter = 0;
    var updateInterval = 3000;

    function autocompleteTags(collectionId) {
        var url = "/Autotagging/GetTagsForCollection?collectionId=" + collectionId;

        var request = new XMLHttpRequest();
        request.open('POST', url, true);
        request.onload = function() { // request successful
            setModalTitle('Waiting queue for processing...');
            showModalBody();
            var taskIds = JSON.parse(request.response);

            var url = "/TaskScheduler/GetTaskStatus?id=" + taskIds[0];

            /*taskIds.forEach(x => {
                const updator = function () {
                    fetch(url)
                    .then((response) => response.json())
                    .then(function (data) {
                        var progress = 100 - data.workCount;

                    if (data.isCompleted == true) {
                            setModalTitle('Autotagging successfully completed!');
                            hideModalBody();
                            hideLoadSpinner();

                            clearInterval(loadingUpdateInterval);
                        }
                        else if (data.isInProgress == false) {
                            setModalTitle('Waiting queue for processing...');
                        }
                        else {
                            setModalTitle('Autotagging in progress...');
                            setModalProgress(taskIds.length, progress, averageExecutionTime);
                            timerCounter += updateInterval;
                        }
                    })
                }

                updator();
                var loadingUpdateInterval = setInterval(updator, updateInterval);
            });*/
            setModalTitle('Autotagging in progress...');
            hideModalBody();
        };
        request.send(); 
    }

    window.scrollTo(0, 1);
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
