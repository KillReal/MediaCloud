@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using MediaCloud.Data.Types
@model MediaCloud.Pages.Gallery.CollectionModel

@{
    ViewData["Title"] = "Collection";
}

<div class="page-container">
    <h1>Collection</h1>

    <div class="button-panel">
        <a onclick="history.back();" class="btn btn-info">
            Back
        </a>
        <a class="btn btn-success btn-rounded me-1 mb-2" 
            href="@Url.Action("DownloadCollection", "Gallery", new { id = Model.Collection.Id })">
            Download
        </a>
	</div>

    <hr />

    <form enctype="multipart/form-data" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for=@(Model.ReturnUrl) class="form-control">
        <input type="hidden" asp-for=@(Model.IsOrderChanged) class="form-control" id="order-changed">
        <input type="hidden" asp-for=@(Model.Collection.Id) class="form-control">
        <div class="row thumbnail-sortable" id="sortable-gallery" style="display: none"> 
        </div>
        
        <div class="row">
            <div class="col-sm pt-3" style="margin-right: -1rem">
                <ul class="list-group">
                    <li class="list-group-item">Id: @Model.Collection.Id</li>
                    <li class="list-group-item">Files size: @Model.CollectionSizeInfo</li>
                    <li class="list-group-item">Files count: @Model.TotalCount</li>
                    <li class="list-group-item">Tags count: @Model.Tags.Count</li>
                    
                </ul>
            </div>
            <div class="col-sm pt-3" style="margin-left: -1rem">
                <ul class="list-group">
                    <li class="list-group-item">Creator: @Model.Collection.Creator.Name</li>
                    <li class="list-group-item">Updator: @Model.Collection.Updator.Name</li>
                    <li class="list-group-item">Time of create: @Model.Collection.CreatedAt</li>
                    <li class="list-group-item">Time of update: @Model.Collection.UpdatedAt</li>
                </ul>
            </div>
        </div>

        <div class="row">
            <div class="form-group mb-3 col-sm h-100 autocomplete-list autocomplete">
                <label class="col-form-label">Enter tags with spaces between</label>
                <textarea asp-for="@Model.TagsString" class="form-control" style="height: 100%" id="filterGrab">

                </textarea>
            </div>
            <div class="col-sm">
                <label class="col-form-label" style="visibility: hidden">List of existed tags</label>
                <ul class="list-group">
                    <li class="list-group-item h-100">
                        Related tags:
                        @foreach (var tag in Model.Tags)
                        {
                            if (tag.Type == TagType.Character)
                            {
                                <a class="btn btn-warning btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id
                                    asp-route-returnUrl='@Model.ReturnUrl'>
                                    @tag.Name
                                </a>
                            }
                            else if (tag.Type == TagType.Series)
                            {
                                <a class="btn btn-success btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id
                                    asp-route-returnUrl='@Model.ReturnUrl'>
                                    @tag.Name
                                </a>
                            }
                            else if (tag.Type == TagType.Clothes)
                            {
                                <a class="btn btn-danger btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id
                                    asp-route-returnUrl='@Model.ReturnUrl'>
                                    @tag.Name
                                </a>
                            }
                            else
                            {
                                <a class="btn btn-info btn-rounded me-1 mb-2" 
                                    asp-page="/Tags/Detail" 
                                    asp-route-id=@tag.Id
                                    asp-route-returnUrl='@Model.ReturnUrl'>
                                    @tag.Name
                                </a>
                            }
                        }
                    </li>
                </ul>
            </div>
        </div>

        <div class="form-group control-button-panel mt-3">
            <input type="submit" value="Edit" class="btn btn-success" />
            <input class="btn btn-success btn-rounded" 
                    type="button" 
                    value="Autotag ✨" 
                    id="autotagButton" 
                    onclick="autocompleteTags('@Model.Collection.Id')" 
                />
            <a class="btn btn-info btn-rounded me-1 ms-2" onclick="startReorder();" id="reorder-button">
                Reorder
            </a>
            <a class="btn btn-info btn-rounded me-1 ms-2 text-nowrap" 
                asp-page="Index" 
                asp-route-filter=@(Model.TagsString) 
                asp-route-sort=@("UpdatedAtDesc")>
                Show similar
            </a>
            <button class="btn btn-danger btn-rounded" 
                asp-page-handler="Delete" 
                asp-route-id=@(Model.Collection.Id)>
                Remove
            </button>
        </div>

        <div class="row gallery" id="gallery">   
                
        </div>

        <div class="d-flex justify-content-center">
            <div class="spinner-border text-light" 
                role="status" 
                id="loadingSpinner" 
                style="display: none; width:3rem; height:3rem">
            </div>
        </div>
    </form>

      <div class="modal text-black" id="loadingModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">
                        Tag autocompletion in progress...
                    </h5>
                    <div class="spinner-border text-primary" role="status" id="loadingSpinner" style="display: block">
                    </div>
                </div>
                <div class="modal-body" id="modalBody">
                    <div class="mb-1">
                        <label class="col-form-label" id ="executionTime">
                            It's may take some time...
                        </label>
                    </div>
                    <div class="mb-1">
                        <label class="col-form-label" id="progress">
                            Progress: 0%
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-primary" onclick="hideModalBody()">
                        Close
                    </a>
                </div>
            </div>
        </div>
    </div>
    
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="~/js/html5sortable.js"></script>
<script src="~/js/tagAutocompletion.js"></script>
<script src="~/Pages/Gallery/Collection.cshtml.js"></script>

<script type="text/javascript">
    autocomplete(document.getElementById("filterGrab"));
    
    sortable('.thumbnail-sortable', {
        placeholderClass: 'col-md-2'
    });

    sortable('.thumbnail-sortable')[0].addEventListener('sortupdate', function (e) {
        var row = document.getElementById('sortable-gallery');
        var place = 0;
        for (const child of row.children) {
            var order = child.getElementsByClassName("order-val visually-hidden");
            order[0].value = place;
            place++;
        }
    });

    var rootReturnUrl = '@Model.ReturnUrl.Replace("&", "$")';
    var currentOffset = -@Model.ListRequest.Count;
    var nextOffset = 0;

    window.addEventListener("scroll", function (e) {
        // OnScroll autoloading
        if ((window.innerHeight + window.scrollY + 2000) >= document.body.offsetHeight) {
            // Continue if we at end of page
            if (currentOffset == nextOffset) {
                // Return if we displayed all elements in batches
                return;
            }
            
            if (currentOffset > @Model.TotalCount) {
                // If it last batch, hide loading spinner and return
                nextOffset = currentOffset;
                document.getElementById('loadingSpinner').style = "display: none";
                return;
            }

            // Update current progress
            currentOffset += @Model.ListRequest.Count;

            // Get next batch
            var url = "/Collection/PreviewsBatch?id=" + '@Model.Collection.Id' + "&count=" + @Model.ListRequest.Count + "&offset=" + nextOffset;
            fetch(url).then(function (response) {
                return response.json();
            }).then(function (data) {
                // Get gallerie to show elements batch. One for viewing and one for sorting.
                var gallery = document.getElementById('gallery');
                var sortableGallery = document.getElementById('sortable-gallery');
                for (var i = 0; i < data.length; i++) {
                    // For each element in batch
                    // Creates new cards
                    var sortCard = CreateSortCard(data, i, i + currentOffset);
                    var actualCard = CreateActualCard(data, i, '@Model.Collection.Id');

                    // Add them to galleries
                    gallery.appendChild(actualCard);
                    sortableGallery.appendChild(sortCard);
                }

                // Move to next batch
                sortable('.thumbnail-sortable');
                nextOffset += @Model.ListRequest.Count;
            }).catch(function (err) {
                console.log('Fetch Error :-S', err);
            });
        }
    });

    fetch('/Gallery/IsCollectionAutotaggingExecuted?collectionId=' + '@Model.Collection.Id')
        .then((response) => response.json())
        .then(function (data) {
            if (data == true) {
                    document.getElementById('autotagButton').disabled = true;
                    document.getElementById('autotagButton').value = "Autotagging... ";
            }
        }
    )

    var averageExecutionTime = 45.0 * @Model.TotalCount;

    fetch('/Gallery/GetAverageAutocompleteTagForCollectionExecution?previewsCount=' + @Model.TotalCount)
        .then((response) => response.json())
        .then(function (data) {
            if (data > 0) {
                averageExecutionTime = data;
            }
        }
    )

    var modalTitle = document.getElementById('modalTitle');
    var modalBody = document.getElementById("modalBody");
    var loadSpinner = document.getElementById("loadingSpinner");

    function setModalTitle(title) {
        modalTitle.innerHTML = title;
    }

    function setModalProgress(progress, executionTime) {
        document.getElementById('progress').innerHTML = "Progress: " + parseInt(progress, 10)+ "%";
        document.getElementById('executionTime').innerHTML = 'It may take some time (~' + parseInt(executionTime, 10) + ' sec)';
        document.getElementById('autotagButton').value = "Autotagging... " + parseInt(progress, 10)+ "%";
    }

    function hideModalBody() {
        $('#loadingModal').modal('hide');
    }

    function showModalBody() {
        $('#loadingModal').modal('show');
        document.getElementById('autotagButton').disabled = true;
        document.getElementById('autotagButton').value = "Autotagging... ";
    }

    function showLoadSpinner() {
        loadSpinner.style.display = "block";
    }

    function hideLoadSpinner() {
        loadSpinner.style.display = "none";
    }

    var timerCounter = 0;
    var updateInterval = 3000;

    function autocompleteTags(collectionId) {
        var url = "/Gallery/AutocompleteTagForCollection?collectionId=" + collectionId;

        var request = new XMLHttpRequest();
        request.open('POST', url, true);
        request.onload = function() { // request successful
            setModalTitle('Waiting queue for processing...');
            showModalBody();
            var data = JSON.parse(request.response);

            var url = "/TaskScheduler/GetTaskStatus?id=" + data;

            const updator = function () {
                fetch(url)
                    .then((response) => response.json())
                    .then(function (data) {
                        var progress = data.workCount;

                        if (data.queuePosition > 1) {
                            setModalTitle('Waiting queue for processing...');
                        }
                        else if (data.queuePosition == 1) {
                            setModalTitle('Autotagging in progress...');
                            setModalProgress(progress, averageExecutionTime);
                            timerCounter += updateInterval;
                        }
                        else if (data.workCount == 0 && data.isExist == false) {
                            setModalTitle('Autotagging successfully completed!');
                            hideModalBody();
                            hideLoadSpinner();

                            location.reload();

                            clearInterval(loadingUpdateInterval);
                        }
                    })
                }

                updator();
                var loadingUpdateInterval = setInterval(updator, updateInterval);
            };

        request.send();
    }

    window.scrollTo(0, 1);
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
