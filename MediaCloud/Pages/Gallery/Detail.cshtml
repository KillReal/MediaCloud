@page
@using MediaCloud.Data.Types
@using MediaCloud.Extensions
@using MediaCloud.WebApp
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model MediaCloud.Pages.Gallery.DetailModel

@{
    ViewData["Title"] = "Details";
}

<div class="page-container">
    <h1>Details</h1>

    <div class="button-panel">
        <div class="button-group justify-content-between w-100">
            <a onclick="history.back();" class="btn btn-info">
                Back
            </a>
            <a class="btn btn-success btn-rounded" 
                href="@Url.Action("Download", "Gallery", new { id = Model.PreviewId })">
                Download
            </a>
        </div>
	</div>

    <hr />

    <div class="picture-container">
        @if (Model.PrevPreviewId != null && Model.BlobType.Contains("image"))
        {
            <img id="left-arrow" 
                src="/img/arrow-left.svg" 
                class="arrow-button-left" 
                onclick="window.location.replace('/Gallery/Detail/?id=@(Model.PrevPreviewId)')"
            />
        }
        
        <div class="picture-viewport w-100 shadow-1-strong">
            @if (Model.BlobType.Contains("image"))
            {
                <img class="picture-viewer shadow-1-strong mb-4 me-2 ms-2 rounded" id="picture" src="data:image/png;base64,@Convert.ToBase64String(Model.Blob.Content)"
                />
            }
            else if (Model.BlobType.Contains("text") || Model.BlobName.Contains("md"))
            {
                <div class="form-group mb-3 col">
                    <label class="col-form-label">
                        @Model.BlobName
                    </label>
                    <textarea readonly class="form-control" style="resize: none; height: 60vh;">@System.Text.Encoding.Default.GetString(Model.Blob.Content)</textarea>
                </div>
            }
            else 
            {
                <div class="align-self-center">
                    @Model.BlobName cannot be displayed. Download it to open via specialized application.
                </div>
            }
        </div>

        @if (Model.NextPreviewId != null && Model.BlobType.Contains("image"))
        {
            <img id="right-arrow" 
                src="/img/arrow-right.svg" 
                class="arrow-button-right"
                onclick="window.location.replace('/Gallery/Detail/?id=@(Model.NextPreviewId)')"
            />
        }

        @if (Model.BlobType.Contains("image"))
        {
            <div class="picture-controls-container">
                Rotation:
                <button class="btn btn-info btn-rounded rotate-button" style="height: 2rem" onclick="rotatePicture(-90);">
                    <img class="h-100" src="/img/rotating-arrow-left.png">
                </button>
                <button class="btn btn-info btn-rounded rotate-button" style="height: 2rem" onclick="rotatePicture(90);">
                    <img class="h-100" src="/img/rotating-arrow-right.png">
                </button>
            </div>
        }
    </div>

    <div class="row">
        <form enctype="multipart/form-data" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for=@(Model.PreviewId) class="form-control">
            <input type="hidden" asp-for=@(Model.Blob.Preview.Id) class="form-control">
            <input type="hidden" asp-for=@(Model.Blob.Id) class="form-control">
            <input type="hidden" asp-for=@(Model.RotationDegree) class="form-control" id="modelRotationDegree">
            <div class="row">
                <div class="form-group autocomplete-list autocomplete mb-3 col-sm-10">
                    <label class="col-form-label">
                        Enter tags with spaces between
                    </label>
                    <textarea asp-for="@Model.TagsString" class="form-control" id="filterGrab">        
                    </textarea>
                </div>
                @if (Model.IsUserAnAdmin)
                {
                    <div class="form-group autocomplete-list autocomplete mb-3 col-sm-2">
                        <label class="col-form-label">
                            Preview rating
                        </label>
                        <select asp-for="@Model.PreviewRating" class="form-control">
                            <option value="1">General</option>
                            <option value="2">Sensitive</option>
                            <option value="3">Questionable</option>
                            <option value="4">Explicit</option>
                        </select>
                    </div>
                }
            </div>
            <div class="form-group d-flex justify-content-between">
                <div class="button-panel w-100 mb-2">
                    <div class="button-group justify-content-between">
                        <input type="submit" value="Edit" class="btn btn-success" />
                        @if (Model.IsAutotaggingEnabled && Model.BlobType.Contains("image"))
                        {
                            <input class="btn btn-success btn-rounded" 
                                type="button" 
                                value="Autotag ✨" 
                                id="autotagButton" 
                                onclick="autocompleteTags('@Model.PreviewId')" 
                            />
                        }
                    </div>
                    <div class="button-group">
                        <a class="btn btn-info btn-rounded text-nowrap" 
                            asp-page="Index" 
                            asp-route-filter=@(Model.TagsString) 
                            asp-route-sort=@("UpdatedAtDesc")>
                            Show similar
                        </a>
                        <button class="btn btn-danger btn-rounded" 
                            asp-page-handler="Delete" 
                            asp-route-id=@(Model.PreviewId)>
                            Remove
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="row">
        <div class="col-sm pt-3">
            <ul class="list-group">
                <li class="list-group-item">Id: @Model.Blob.Id</li>  
                @if (Model.Blob.Resolution.Contains('x'))
                {
                    <li class="list-group-item">Resolution: @Model.Blob.Resolution</li>
                    <li class="list-group-item">Rating: @Model.PreviewRating.GetDisplayName()</li>
                }
                <li class="list-group-item">File name: @Model.BlobName</li>
                <li class="list-group-item">File type: @Model.BlobType</li>
                <li class="list-group-item">Size: @Model.Blob.SizeInfo</li>
                <li class="list-group-item">Creator: @Model.Blob.Creator.Name</li>
                <li class="list-group-item">Updator: @Model.Blob.Updator.Name</li>
                <li class="list-group-item">Time of create: @Model.Blob.CreatedAt</li>
                <li class="list-group-item">Time of update: @Model.Blob.UpdatedAt</li>
            </ul>
        </div>
        
        <partial name="~/Pages/Gallery/_Tags.cshtml" model=@(new _TagsModel(Model.Tags))/>
        
    </div>

    <div class="modal text-black" id="loadingModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">
                        Tag autocompletion in progress...
                    </h5>
                    <div class="spinner-border text-primary" role="status" id="loadingSpinner" style="display: block">
                    </div>
                </div>
                <div class="modal-body" id="modalBody">
                    <div class="mb-1">
                        <label class="col-form-label" id ="executionTime">
                            It's may take some time (~45 sec)
                        </label>
                    </div>
                    <div class="mb-1">
                        <label class="col-form-label" id="progress">
                            Progress: 0%
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-primary" onclick="hideModalBody()">
                        Close
                    </a>
                </div>
            </div>
        </div>
    </div>

</div>

<script src="~/js/tagAutocompletion.js"></script>

<script>
    autocomplete(document.getElementById("filterGrab"));
    let isPreviewSwitchingEnabled = true;

    document.getElementById("filterGrab").addEventListener("focusin", (event) => {
        isPreviewSwitchingEnabled = false;
    });

    document.getElementById("filterGrab").addEventListener("focusout", (event) => {
        isPreviewSwitchingEnabled = true;
    });

    document.addEventListener('keydown', (event) => {
        if (isPreviewSwitchingEnabled) {
            if (event.code == 'ArrowLeft') {
                document.getElementById("left-arrow").click();
            }
            if (event.code == 'ArrowRight') {
                document.getElementById("right-arrow").click();
            }
        }
    }, false);

    var currentDegree = 0;

    function rotatePicture(degree) {

        currentDegree += degree;

        if (currentDegree > 180) {
            currentDegree = -90;
        } else if (currentDegree < -180) {
            currentDegree = 90;    
        }

        var picture = document.getElementById("picture");
        picture.style.transform = "rotate(" + currentDegree + "deg)";

        if (currentDegree == 90 || currentDegree == -90) {
            picture.style.scale = picture.height / picture.width;
        }
        else {
            picture.style.scale = 1;
        }

        var modelRotationDegree = document.getElementById("modelRotationDegree");
        modelRotationDegree.value = currentDegree;
    }

    if (@Json.Serialize(Model.IsAutotaggingEnabled))
    {
        fetch('/Autotagging/IsPreviewProcessing?previewId=' + '@Model.PreviewId')
            .then((response) => response.json())
            .then(function (data) {
                if (data == true) {
                        document.getElementById('autotagButton').disabled = true;
                        document.getElementById('autotagButton').value = "Autotagging... ";
                }
            }
        )

        var averageExecutionTime = 45.0;

        fetch('/Autotagging/GetPreviewTagsProcessingTime')
            .then((response) => response.json())
            .then(function (data) {
                if (data > 0) {
                    averageExecutionTime = data;
                }
            }
        )

        var modalTitle = document.getElementById('modalTitle');
        var modalBody = document.getElementById("modalBody");
        var loadSpinner = document.getElementById("loadingSpinner");

        function setModalTitle(title) {
            modalTitle.innerHTML = title;
        }

        function setModalProgress(progress, executionTime) {
            document.getElementById('progress').innerHTML = "Progress: " + parseInt(progress, 10) + "%";
            document.getElementById('executionTime').innerHTML = 'It may take some time (~' + parseInt(executionTime, 10) + ' sec)';
            document.getElementById('autotagButton').value = "Autotagging... " + parseInt(progress, 10)+ "%";
        }

        function hideModalBody() {
            $('#loadingModal').modal('hide');
        }

        function showModalBody() {
            $('#loadingModal').modal('show');
            document.getElementById('autotagButton').disabled = true;
            document.getElementById('autotagButton').value = "Autotagging... ";
        }

        function showLoadSpinner() {
            loadSpinner.style.display = "block";
        }

        function hideLoadSpinner() {
            loadSpinner.style.display = "none";
        }

        var timerCounter = 0;
        var updateInterval = 3000;
        var progress = 0;

        function autocompleteTags(previewId, isExecuted = false) {
            
            var url = "/Autotagging/GetTagsForPreview?previewId=" + previewId;

            var request = new XMLHttpRequest();
            request.open('POST', url, true);
            request.onload = function() { // request successful
                setModalTitle('Waiting queue for processing...');
                showModalBody();
                var data = JSON.parse(request.response);

                var url = "/TaskScheduler/GetTaskStatus?id=" + data;

                const updator = function () {
                    fetch(url)
                        .then((response) => response.json())
                        .then(function (data) {
                            progress = 100 - data.workCount;

                            if (data.isCompleted == true) {
                                setModalTitle('Autotagging successfully completed!');
                                hideModalBody();
                                hideLoadSpinner();

                                location.reload();
                                clearInterval(loadingUpdateInterval);
                            }
                            else if (data.isInProgress == false) {
                                setModalTitle('Waiting queue for processing...');
                            }
                            else {
                                setModalTitle('Autotagging in progress...');
                                setModalProgress(progress, averageExecutionTime);
                                timerCounter += updateInterval;
                            }
                        })
                    }

                    updator();
                    var loadingUpdateInterval = setInterval(updator, updateInterval);
                };

            request.send();
        }
    }
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}